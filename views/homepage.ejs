<div class="container">
  <h1>Welcome to understanding and preventing CSRF attacks in Sails (with tokens)!</h1>
  <h4>Source code available on <a href="https://github.com/irlnathan/csrftokenon">github.</a></h4>
  <p style="font-size: 21px; font-family: Helvetica Neue; font-weight: 200;">
    We're simulating a CSRF attack where an unsuspecting user has authenticated to a trusted site.  The user clicks on a link button (4) and is sent to a different domain <a href="https://badsite.herokuapp.com/csrftokenon">https://badsite.herokuapp.com/csrftokenon</a>.  On this domain the user must click a button to collect their winnings.  The submit button of this form is actually making a POST request to change the user's password using the hijacked session cookie from the browser. Since we're using CSRF tokens the ajax POST requests (1) and (3) must have the csrf token to function.  We've passed the tokens in those requests, however, the CSRF attack site doesn't have access to the token and therefore is prevented from reaching the controller/action. </p>
  <b>To see the effect of each button, open your browser's console.</b>

  <p style="font-size: 21px; font-family: Helvetica Neue; font-weight: 200;">
    <b>Note:</b> We've added a get request to <i>/csrfToken</i> and assign the value return to <i>_csrf</i>.  We'll use this token in our AJAX requests. 
  </p>
   
  <div class="row">
    <div class="col-md-4">
      <button class="btn btn-primary" style="outline: none" id="loginButton">
        <span class="badge">1 </span>
        Ajax POST to Login
      </button>
    </div> <!-- class="row" -->
  </div><!-- class="col-md-10" -->
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-body">
        This simulates the creation of a session on the server. The code is listed below. Note the _csrf token:
        <pre><code>
$.ajax({
  url: '/user/login',
  type: 'POST',
  data: { 
  _csrf: _csrf
  },
  success: function(result){
    console.log('result: ', result);
  },
  error: function(xhr, status, err){
    console.log(err);
  }
});
        </code></pre>  
      </div> <!-- class="panel-body" -->
    </div> <!-- class="panel panel-default" -->
  </div> <!-- class="col-md-12" -->
  <div class="row">
    <div class="col-md-10" style="margin-top: 10px">
      <button class="btn btn-primary" style="outline: none" id="differentEndpoint">
        <span class="badge">2 </span>
        Ajax GET request to a different endpoint
      </button>
    </div> <!-- class="row" -->
  </div><!-- class="col-md-10" -->
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-body">
        By making a GET request to a different endpoint we're testing whether we get back the same session id.   
      </div> <!-- class="panel-body" -->
    </div> <!-- class="panel panel-default" -->
  </div> <!-- class="col-md-12" -->
  <div class="row">
    <div class="col-md-10" style="margin-top: 10px">
      <button class="btn btn-primary" style="outline: none" id="resetPassword">
        <span class="badge">3 </span>
        Ajax POST request to resetPassword endpoint.
      </button> 
    </div> <!-- class="row" -->
  </div><!-- class="col-md-10" -->
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-body">
        Here we establish the password so that we can see if the hacking attack successfully changes the password from the one we have now. Once again we'll pass the _csrf token:
        <pre><code>
$.ajax({
  url: '/user/resetPassword',
  type: 'POST',
  data: { 
    _csrf: _csrf
  },
  success: function(data){
    console.log('message is: ', data.message);
  },
  error: function(xhr, status, err){
    console.log(err);
  }
});
        </code></pre>   
      </div> <!-- class="panel-body" -->
    </div> <!-- class="panel panel-default" -->
  </div> <!-- class="col-md-12" -->
  <div class="row">
    <div class="col-md-10" style="margin-top: 10px">
      <button class="btn btn-primary" style="outline: none" id="badLink">
        <span class="badge">4 </span>
        Redirects browser to badsite page.
      </button> 
    </div> <!-- class="row" -->
  </div><!-- class="col-md-10" -->
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-body">
        This will take us to a different domain and server and simulate a user clicking on a link in an email.   
      </div> <!-- class="panel-body" -->
    </div> <!-- class="panel panel-default" -->
  </div> <!-- class="col-md-12" -->
</div><!-- class="container" -->